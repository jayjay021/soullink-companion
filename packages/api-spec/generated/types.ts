/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check endpoint
         * @description Returns the health status of the API
         */
        get: operations["getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List sessions
         * @description Returns a list of all sessions
         */
        get: operations["listSessions"];
        put?: never;
        /**
         * Create a new session
         * @description Creates a new session
         */
        post: operations["createSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{sessionId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sessionId: string;
            };
            cookie?: never;
        };
        /**
         * Get session by ID
         * @description Returns a session by its ID
         */
        get: operations["getSession"];
        /**
         * Update session
         * @description Update session name, description, or started status
         */
        put: operations["updateSession"];
        post?: never;
        /**
         * Delete session
         * @description Deletes a session by its ID
         */
        delete: operations["deleteSession"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{sessionId}/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Join session
         * @description Join a session as a player
         */
        post: operations["joinSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @example {
         *       "status": "ok",
         *       "timestamp": "2025-06-20T08:59:34.496Z",
         *       "uptime": 20.243046746,
         *       "version": "1.0.0"
         *     } */
        HealthResponse: {
            /**
             * @description Health status
             * @enum {string}
             */
            status: "ok" | "error";
            /**
             * Format: date-time
             * @description Current server timestamp
             */
            timestamp: string;
            /** @description Server uptime in seconds */
            uptime: number;
            /** @description API version */
            version?: string;
        };
        /** @example {
         *       "success": false,
         *       "error": {
         *         "message": "Resource not found",
         *         "code": "NOT_FOUND"
         *       }
         *     } */
        Error: {
            /** @enum {boolean} */
            success: false;
            error: {
                /** @description Error message */
                message: string;
                /** @description Error code */
                code?: string;
                /** @description Additional error details */
                details?: Record<string, never>;
            };
        };
        /** @example {
         *       "id": "session-123",
         *       "name": "My Session",
         *       "description": "A fun session",
         *       "creationDate": "2025-06-20T09:00:00.000Z",
         *       "started": false,
         *       "players": [
         *         {
         *           "id": "player-1",
         *           "name": "Alice"
         *         },
         *         {
         *           "id": "player-2",
         *           "name": "Bob"
         *         }
         *       ]
         *     } */
        Session: {
            id: string;
            name: string;
            description: string;
            /** Format: date-time */
            creationDate: string;
            started: boolean;
            players: components["schemas"]["Player"][];
        };
        /** @example {
         *       "sessions": [
         *         {
         *           "id": "session-123",
         *           "name": "My Session",
         *           "description": "A fun session",
         *           "creationDate": "2025-06-20T09:00:00.000Z",
         *           "started": false
         *         },
         *         {
         *           "id": "session-456",
         *           "name": "Another Session",
         *           "description": "Another fun session",
         *           "creationDate": "2025-06-20T10:00:00.000Z",
         *           "started": true
         *         }
         *       ]
         *     } */
        SessionsResponse: {
            sessions: components["schemas"]["SessionListItem"][];
        };
        /** @example {
         *       "id": "session-123",
         *       "name": "My Session",
         *       "description": "A fun session",
         *       "creationDate": "2025-06-20T09:00:00.000Z",
         *       "started": false
         *     } */
        SessionListItem: {
            id: string;
            name: string;
            description: string;
            /** Format: date-time */
            creationDate: string;
            started: boolean;
        };
        /** @example {
         *       "id": "player-1",
         *       "name": "Alice"
         *     } */
        Player: {
            id: string;
            name: string;
        };
    };
    responses: {
        /** @description Bad request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal server error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Health status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            500: components["responses"]["InternalServerError"];
        };
    };
    listSessions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of sessions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionsResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    description: string;
                };
            };
        };
        responses: {
            /** @description Session created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Session"];
                };
            };
            400: components["responses"]["BadRequest"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sessionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Session found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Session"];
                };
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sessionId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                    description?: string;
                    started?: boolean;
                };
            };
        };
        responses: {
            /** @description Session updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Session"];
                };
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sessionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Session deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    joinSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sessionId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    player: components["schemas"]["Player"];
                };
            };
        };
        responses: {
            /** @description Player joined session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Session"];
                };
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
}
