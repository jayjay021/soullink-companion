/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check endpoint
         * @description Returns the health status of the API
         */
        get: operations["getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Server-Sent Events endpoint
         * @description Establishes SSE connection for real-time updates
         */
        get: operations["getEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/games": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all games
         * @description Retrieve a list of all games
         */
        get: operations["getGames"];
        put?: never;
        /**
         * Create a new game
         * @description Create a new game with the provided data
         */
        post: operations["createGame"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/games/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a game by ID
         * @description Retrieve a specific game by its ID
         */
        get: operations["getGameById"];
        /**
         * Update a game
         * @description Update an existing game with new data
         */
        put: operations["updateGame"];
        post?: never;
        /**
         * Delete a game
         * @description Delete a game by its ID
         */
        delete: operations["deleteGame"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @example {
         *       "status": "ok",
         *       "timestamp": "2025-06-20T08:59:34.496Z",
         *       "uptime": 20.243046746,
         *       "version": "1.0.0"
         *     } */
        HealthResponse: {
            /**
             * @description Health status
             * @enum {string}
             */
            status: "ok" | "error";
            /**
             * Format: date-time
             * @description Current server timestamp
             */
            timestamp: string;
            /** @description Server uptime in seconds */
            uptime: number;
            /** @description API version */
            version?: string;
        };
        /** @example {
         *       "success": false,
         *       "error": {
         *         "message": "Resource not found",
         *         "code": "NOT_FOUND"
         *       }
         *     } */
        Error: {
            /** @enum {boolean} */
            success: false;
            error: {
                /** @description Error message */
                message: string;
                /** @description Error code */
                code?: string;
                /** @description Additional error details */
                details?: Record<string, never>;
            };
        };
        /** @example {
         *       "id": "123e4567-e89b-12d3-a456-426614174000",
         *       "name": "My Awesome Game",
         *       "createdAt": "2025-06-20T10:30:00.000Z"
         *     } */
        Game: {
            /**
             * Format: uuid
             * @description Unique identifier for the game
             */
            id: string;
            /** @description Name of the game */
            name: string;
            /**
             * Format: date-time
             * @description When the game was created
             */
            createdAt: string;
        };
        /** @example {
         *       "name": "My Awesome Game"
         *     } */
        CreateGameRequest: {
            /** @description Name of the game */
            name: string;
        };
        /** @example {
         *       "name": "Updated Game Name"
         *     } */
        UpdateGameRequest: {
            /** @description Name of the game */
            name?: string;
        };
        /** @example {
         *       "games": [
         *         {
         *           "id": "123e4567-e89b-12d3-a456-426614174000",
         *           "name": "Game 1",
         *           "createdAt": "2025-06-20T10:30:00.000Z"
         *         }
         *       ],
         *       "total": 1
         *     } */
        GameList: {
            games: components["schemas"]["Game"][];
            /** @description Total number of games */
            total: number;
        };
    };
    responses: {
        /** @description Resource not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Bad request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal server error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Health status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
        };
    };
    getEvents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description SSE stream established */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/event-stream": string;
                };
            };
        };
    };
    getGames: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of games */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameList"];
                };
            };
            500: components["responses"]["InternalServerError"];
        };
    };
    createGame: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGameRequest"];
            };
        };
        responses: {
            /** @description Game created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Game"];
                };
            };
            400: components["responses"]["BadRequest"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getGameById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Game ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Game details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Game"];
                };
            };
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateGame: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Game ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateGameRequest"];
            };
        };
        responses: {
            /** @description Game updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Game"];
                };
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteGame: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Game ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Game deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
}
