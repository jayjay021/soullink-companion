/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check endpoint
         * @description Returns the health status of the API
         */
        get: operations["getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List sessions
         * @description Returns a list of all sessions
         */
        get: operations["listSessions"];
        put?: never;
        /**
         * Create a new session
         * @description Creates a new session
         */
        post: operations["createSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{sessionId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sessionId: string;
            };
            cookie?: never;
        };
        /**
         * Get session by ID
         * @description Returns a session by its ID
         */
        get: operations["getSession"];
        /**
         * Update session
         * @description Update session name, description, or status
         */
        put: operations["updateSession"];
        post?: never;
        /**
         * Delete session
         * @description Deletes a session by its ID
         */
        delete: operations["deleteSession"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{sessionId}/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Join session
         * @description Join a session as a player
         */
        post: operations["joinSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pokedex/pokemon": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Pokédex Pokémon
         * @description Returns a list of Pokémon from the Pokédex with optional filters
         */
        get: operations["getPokedexPokemon"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pokemon/{sessionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List/filter Pokémon
         * @description List or filter Pokémon for a session/player
         */
        get: operations["listPokemon"];
        put?: never;
        /**
         * Add a Pokémon encounter
         * @description Add a Pokémon for a player in a session
         */
        post: operations["addPokemon"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pokemon/{sessionId}/{pokemonId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update a Pokémon
         * @description Update a Pokémon’s status, location, or properties
         */
        patch: operations["updatePokemon"];
        trace?: never;
    };
    "/pokemon/{sessionId}/routes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get unique routes
         * @description Get unique routes for a session/player
         */
        get: operations["getPokemonRoutes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @example {
         *       "status": "ok",
         *       "timestamp": "2025-06-20T08:59:34.496Z",
         *       "uptime": 20.243046746,
         *       "version": "1.0.0"
         *     } */
        HealthResponse: {
            /**
             * @description Health status
             * @enum {string}
             */
            status: "ok" | "error";
            /**
             * Format: date-time
             * @description Current server timestamp
             */
            timestamp: string;
            /** @description Server uptime in seconds */
            uptime: number;
            /** @description API version */
            version?: string;
        };
        /** @example {
         *       "success": false,
         *       "error": {
         *         "message": "Resource not found",
         *         "code": "NOT_FOUND"
         *       }
         *     } */
        Error: {
            /** @enum {boolean} */
            success: false;
            error: {
                /** @description Error message */
                message: string;
                /** @description Error code */
                code?: string;
                /** @description Additional error details */
                details?: Record<string, never>;
            };
        };
        /**
         * @description The status of a session
         * @example WAITING
         * @enum {string}
         */
        SessionStatus: "WAITING" | "STARTED" | "FINISHED";
        /** @example {
         *       "id": "session-123",
         *       "name": "My Session",
         *       "description": "A fun session",
         *       "createdAt": "2025-06-20T09:00:00.000Z",
         *       "status": "WAITING",
         *       "players": [
         *         {
         *           "id": "player-1",
         *           "name": "Alice"
         *         },
         *         {
         *           "id": "player-2",
         *           "name": "Bob"
         *         }
         *       ]
         *     } */
        Session: {
            id: string;
            name: string;
            description: string;
            /** Format: date-time */
            createdAt: string;
            status: components["schemas"]["SessionStatus"];
            players: components["schemas"]["Player"][];
        };
        /** @example {
         *       "sessions": [
         *         {
         *           "id": "session-123",
         *           "name": "My Session",
         *           "description": "A fun session",
         *           "createdAt": "2025-06-20T09:00:00.000Z",
         *           "status": "WAITING"
         *         },
         *         {
         *           "id": "session-456",
         *           "name": "Another Session",
         *           "description": "Another fun session",
         *           "createdAt": "2025-06-20T10:00:00.000Z",
         *           "status": "STARTED"
         *         }
         *       ]
         *     } */
        SessionsResponse: {
            sessions: components["schemas"]["SessionListItem"][];
        };
        /** @example {
         *       "id": "session-123",
         *       "name": "My Session",
         *       "description": "A fun session",
         *       "createdAt": "2025-06-20T09:00:00.000Z",
         *       "status": "WAITING"
         *     } */
        SessionListItem: {
            id: string;
            name: string;
            description: string;
            /** Format: date-time */
            createdAt: string;
            status: components["schemas"]["SessionStatus"];
        };
        /** @example {
         *       "id": "player-1",
         *       "name": "Alice"
         *     } */
        Player: {
            id: string;
            name: string;
        };
        /** @example {
         *       "pokemon": [
         *         {
         *           "id": 1,
         *           "name": {
         *             "english": "Bulbasaur",
         *             "japanese": "フシギダネ",
         *             "german": "Bisasam"
         *           },
         *           "type": [
         *             "Grass",
         *             "Poison"
         *           ],
         *           "base": {
         *             "HP": 45,
         *             "Attack": 49,
         *             "Defense": 49,
         *             "Sp. Attack": 65,
         *             "Sp. Defense": 65,
         *             "Speed": 45
         *           },
         *           "species": "Seed Pokémon",
         *           "description": "Bulbasaur can be seen napping in bright sunlight. There is a seed on its back. By soaking up the sun's rays, the seed grows progressively larger.",
         *           "evolution": {
         *             "next": [
         *               [
         *                 "2",
         *                 "Level 16"
         *               ]
         *             ]
         *           },
         *           "profile": {
         *             "height": "0.7 m",
         *             "weight": "6.9 kg",
         *             "egg": [
         *               "Monster",
         *               "Grass"
         *             ],
         *             "ability": [
         *               [
         *                 "Overgrow",
         *                 "false"
         *               ],
         *               [
         *                 "Chlorophyll",
         *                 "true"
         *               ]
         *             ],
         *             "gender": "87.5:12.5"
         *           },
         *           "image": {
         *             "sprite": "https://raw.githubusercontent.com/Purukitto/pokemon-data.json/master/images/pokedex/sprites/001.png",
         *             "thumbnail": "https://raw.githubusercontent.com/Purukitto/pokemon-data.json/master/images/pokedex/thumbnails/001.png",
         *             "hires": "https://raw.githubusercontent.com/Purukitto/pokemon-data.json/master/images/pokedex/hires/001.png"
         *           }
         *         }
         *       ]
         *     } */
        PokedexPokemonResponse: {
            pokemon: components["schemas"]["PokedexPokemon"][];
        };
        /** @example {
         *       "id": 1,
         *       "name": {
         *         "english": "Bulbasaur",
         *         "japanese": "フシギダネ",
         *         "german": "Bisasam"
         *       },
         *       "type": [
         *         "Grass",
         *         "Poison"
         *       ],
         *       "base": {
         *         "HP": 45,
         *         "Attack": 49,
         *         "Defense": 49,
         *         "Sp. Attack": 65,
         *         "Sp. Defense": 65,
         *         "Speed": 45
         *       },
         *       "species": "Seed Pokémon",
         *       "description": "Bulbasaur can be seen napping in bright sunlight. There is a seed on its back. By soaking up the sun's rays, the seed grows progressively larger.",
         *       "evolution": {
         *         "next": [
         *           [
         *             "2",
         *             "Level 16"
         *           ]
         *         ]
         *       },
         *       "profile": {
         *         "height": "0.7 m",
         *         "weight": "6.9 kg",
         *         "egg": [
         *           "Monster",
         *           "Grass"
         *         ],
         *         "ability": [
         *           [
         *             "Overgrow",
         *             "false"
         *           ],
         *           [
         *             "Chlorophyll",
         *             "true"
         *           ]
         *         ],
         *         "gender": "87.5:12.5"
         *       },
         *       "image": {
         *         "sprite": "https://raw.githubusercontent.com/Purukitto/pokemon-data.json/master/images/pokedex/sprites/001.png",
         *         "thumbnail": "https://raw.githubusercontent.com/Purukitto/pokemon-data.json/master/images/pokedex/thumbnails/001.png",
         *         "hires": "https://raw.githubusercontent.com/Purukitto/pokemon-data.json/master/images/pokedex/hires/001.png"
         *       }
         *     } */
        PokedexPokemon: {
            /** @description Pokémon National Dex number */
            id: number;
            name: components["schemas"]["PokedexPokemonName"];
            /** @description Pokémon types */
            type: string[];
            base: components["schemas"]["PokedexPokemonStats"];
            /** @description Pokémon species classification */
            species: string;
            /** @description Pokémon description */
            description: string;
            evolution?: components["schemas"]["PokedexPokemonEvolution"];
            profile: components["schemas"]["PokedexPokemonProfile"];
            image: components["schemas"]["PokedexPokemonImage"];
        };
        PokedexPokemonName: {
            /** @description English name */
            english: string;
            /** @description Japanese name */
            japanese: string;
            /** @description German name */
            german: string;
        };
        PokedexPokemonStats: {
            HP: number;
            Attack: number;
            Defense: number;
            "Sp. Attack": number;
            "Sp. Defense": number;
            Speed: number;
        };
        PokedexPokemonEvolution: {
            /** @description Previous evolution [id, method] */
            prev?: string[];
            /** @description Next evolution options [[id, method], ...] */
            next?: string[][];
        };
        PokedexPokemonProfile: {
            /** @description Pokémon height */
            height: string;
            /** @description Pokémon weight */
            weight: string;
            /** @description Egg groups */
            egg: string[];
            /** @description Abilities [name, isHidden] */
            ability: string[][];
            /** @description Gender ratio */
            gender: string;
        };
        PokedexPokemonImage: {
            /**
             * Format: uri
             * @description Sprite image URL
             */
            sprite: string;
            /**
             * Format: uri
             * @description Thumbnail image URL
             */
            thumbnail?: string;
            /**
             * Format: uri
             * @description High resolution image URL
             */
            hires?: string;
        };
        /** @example {
         *       "playerId": "player-1",
         *       "pokemonId": "1",
         *       "status": "CAUGHT",
         *       "routeName": "Route 1"
         *     } */
        AddPokemonRequest: {
            playerId: string;
            pokemonId: string;
            status: components["schemas"]["PokemonStatus"];
            routeName: string;
        };
        /** @example {
         *       "status": "FAINTED",
         *       "routeName": "Route 1"
         *     } */
        UpdatePokemonRequest: {
            status?: components["schemas"]["PokemonStatus"];
            routeName?: string;
        };
        /**
         * @description The status of a Pokémon in a session
         * @example CAUGHT
         * @enum {string}
         */
        PokemonStatus: "CAUGHT" | "FAINTED" | "IN_BATTLE" | "RUNNING";
        /** @example {
         *       "id": "pokemon-1",
         *       "playerId": "player-1",
         *       "sessionId": "session-123",
         *       "pokemonId": "1",
         *       "status": "CAUGHT",
         *       "routeName": "Route 1"
         *     } */
        Pokemon: {
            id: string;
            playerId: string;
            sessionId: string;
            pokemonId: string;
            status: components["schemas"]["PokemonStatus"];
            routeName: string;
        };
        /** @example {
         *       "pokemon": [
         *         {
         *           "id": "pokemon-1",
         *           "playerId": "player-1",
         *           "sessionId": "session-123",
         *           "pokemonId": "1",
         *           "status": "CAUGHT",
         *           "routeName": "Route 1"
         *         },
         *         {
         *           "id": "pokemon-2",
         *           "playerId": "player-1",
         *           "sessionId": "session-123",
         *           "pokemonId": "4",
         *           "status": "FAINTED",
         *           "routeName": "Route 1"
         *         }
         *       ]
         *     } */
        PokemonListResponse: {
            pokemon: components["schemas"]["Pokemon"][];
        };
        /** @example {
         *       "routes": [
         *         "Route 1",
         *         "Route 2"
         *       ]
         *     } */
        RouteListResponse: {
            routes: string[];
        };
    };
    responses: {
        /** @description Bad request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal server error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Health status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            500: components["responses"]["InternalServerError"];
        };
    };
    listSessions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of sessions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionsResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    description: string;
                };
            };
        };
        responses: {
            /** @description Session created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Session"];
                };
            };
            400: components["responses"]["BadRequest"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sessionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Session found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Session"];
                };
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    updateSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sessionId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                    description?: string;
                    status?: components["schemas"]["SessionStatus"];
                };
            };
        };
        responses: {
            /** @description Session updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Session"];
                };
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    deleteSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sessionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Session deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    joinSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sessionId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    player: components["schemas"]["Player"];
                };
            };
        };
        responses: {
            /** @description Player joined session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Session"];
                };
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getPokedexPokemon: {
        parameters: {
            query?: {
                /** @description Filter by Pokémon ID */
                id?: number;
                /** @description Filter by Pokémon name (case-insensitive, partial match) */
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Pokédex Pokémon */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PokedexPokemonResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            500: components["responses"]["InternalServerError"];
        };
    };
    listPokemon: {
        parameters: {
            query?: {
                playerId?: string;
                routeName?: string;
                status?: components["schemas"]["PokemonStatus"];
            };
            header?: never;
            path: {
                sessionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Pokémon */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PokemonListResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
        };
    };
    addPokemon: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sessionId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddPokemonRequest"];
            };
        };
        responses: {
            /** @description Pokémon added */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pokemon"];
                };
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
        };
    };
    updatePokemon: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sessionId: string;
                pokemonId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePokemonRequest"];
            };
        };
        responses: {
            /** @description Pokémon updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pokemon"];
                };
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
        };
    };
    getPokemonRoutes: {
        parameters: {
            query?: {
                playerId?: string;
            };
            header?: never;
            path: {
                sessionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of unique routes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteListResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            404: components["responses"]["NotFound"];
        };
    };
}
