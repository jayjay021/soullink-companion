openapi: 3.0.3
info:
  title: SoulLink Companion API
  description: API for the SoulLink Companion application
  version: 1.0.0
  contact:
    name: API Support
    email: support@soullink.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:5001/api/v1
    description: Development server
  - url: https://api.soullink.com/v1
    description: Production server

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the API
      operationId: getHealth
      tags:
        - System
      responses:
        '200':
          description: Health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /session:
    get:
      summary: List sessions
      description: Returns a list of all sessions
      operationId: listSessions
      tags:
        - Session
      responses:
        '200':
          description: List of sessions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new session
      description: Creates a new session
      operationId: createSession
      tags:
        - Session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, description]
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /session/{sessionId}:
    parameters:
      - name: sessionId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get session by ID
      description: Returns a session by its ID
      operationId: getSession
      tags:
        - Session
      responses:
        '200':
          description: Session found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update session
      description: Update session name, description, or status
      operationId: updateSession
      tags:
        - Session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                status:
                  $ref: '#/components/schemas/SessionStatus'
      responses:
        '200':
          description: Session updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete session
      description: Deletes a session by its ID
      operationId: deleteSession
      tags:
        - Session
      responses:
        '204':
          description: Session deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /session/{sessionId}/join:
    post:
      summary: Join session
      description: Join a session as a player
      operationId: joinSession
      tags:
        - Session
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [player]
              properties:
                player:
                  $ref: '#/components/schemas/Player'
      responses:
        '200':
          description: Player joined session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /pokedex/pokemon:
    get:
      summary: Query Pokédex Pokémon
      description: Returns a list of Pokémon from the Pokédex with optional filters
      operationId: getPokedexPokemon
      tags:
        - Pokedex
      parameters:
        - name: id
          in: query
          description: Filter by Pokémon ID
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1025
        - name: name
          in: query
          description: Filter by Pokémon name (case-insensitive, partial match)
          required: false
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: List of Pokédex Pokémon
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PokedexPokemonResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /pokemon/{sessionId}:
    post:
      summary: Add a Pokémon encounter
      description: Add a Pokémon for a player in a session
      operationId: addPokemon
      tags:
        - Pokemon
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddPokemonRequest'
      responses:
        '201':
          description: Pokémon added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pokemon'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      summary: List/filter Pokémon
      description: List or filter Pokémon for a session/player
      operationId: listPokemon
      tags:
        - Pokemon
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
        - name: playerId
          in: query
          required: false
          schema:
            type: string
        - name: routeName
          in: query
          required: false
          schema:
            type: string
        - name: status
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/PokemonStatus'
      responses:
        '200':
          description: List of Pokémon
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PokemonListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /pokemon/{sessionId}/{pokemonId}:
    patch:
      summary: Update a Pokémon
      description: Update a Pokémon’s status, location, or properties
      operationId: updatePokemon
      tags:
        - Pokemon
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
        - name: pokemonId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePokemonRequest'
      responses:
        '200':
          description: Pokémon updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pokemon'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /pokemon/{sessionId}/routes:
    get:
      summary: Get unique routes
      description: Get unique routes for a session/player
      operationId: getPokemonRoutes
      tags:
        - Pokemon
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
        - name: playerId
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of unique routes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

# Add schemas for AddPokemonRequest, UpdatePokemonRequest, Pokemon, PokemonListResponse, RouteListResponse, PokemonStatus, PokemonLocation below in components/schemas
components:
  schemas:
    HealthResponse:
      type: object
      required:
        - status
        - timestamp
        - uptime
      properties:
        status:
          type: string
          enum: [ok, error]
          description: Health status
        timestamp:
          type: string
          format: date-time
          description: Current server timestamp
        uptime:
          type: number
          description: Server uptime in seconds
        version:
          type: string
          description: API version
      example:
        status: ok
        timestamp: "2025-06-20T08:59:34.496Z"
        uptime: 20.243046746
        version: "1.0.0"

    Error:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          enum: [false]
        error:
          type: object
          required:
            - message
          properties:
            message:
              type: string
              description: Error message
            code:
              type: string
              description: Error code
            details:
              type: object
              description: Additional error details
      example:
        success: false
        error:
          message: "Resource not found"
          code: "NOT_FOUND"
    
    SessionStatus:
      type: string
      enum:
        - WAITING
        - STARTED
        - FINISHED
      description: The status of a session
      example: "WAITING"
    
    Session:
      type: object
      required:
        - id
        - name
        - description
        - createdAt
        - status
        - players
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/SessionStatus'
        players:
          type: array
          items:
            $ref: '#/components/schemas/Player'
      example:
        id: "session-123"
        name: "My Session"
        description: "A fun session"
        createdAt: "2025-06-20T09:00:00.000Z"
        status: "WAITING"
        players:
          - id: "player-1"
            name: "Alice"
          - id: "player-2"
            name: "Bob"
    SessionsResponse:
      type: object
      required:
        - sessions
      properties:
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/SessionListItem'
      example:
        sessions:
          - id: "session-123"
            name: "My Session"
            description: "A fun session"
            createdAt: "2025-06-20T09:00:00.000Z"
            status: "WAITING"
          - id: "session-456"
            name: "Another Session"
            description: "Another fun session"
            createdAt: "2025-06-20T10:00:00.000Z"
            status: "STARTED"
    SessionListItem:
      type: object
      required:
        - id
        - name
        - description
        - createdAt
        - status
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/SessionStatus'
      example:
        id: "session-123"
        name: "My Session"
        description: "A fun session"
        createdAt: "2025-06-20T09:00:00.000Z"
        status: "WAITING"
    Player:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string
      example:
        id: "player-1"
        name: "Alice"

    PokedexPokemonResponse:
      type: object
      required:
        - pokemon
      properties:
        pokemon:
          type: array
          items:
            $ref: '#/components/schemas/PokedexPokemon'
      example:
        pokemon:
          - id: 1
            name:
              english: "Bulbasaur"
              japanese: "フシギダネ"
              german: "Bisasam"
            type: ["Grass", "Poison"]
            base:
              HP: 45
              Attack: 49
              Defense: 49
              "Sp. Attack": 65
              "Sp. Defense": 65
              Speed: 45
            species: "Seed Pokémon"
            description: "Bulbasaur can be seen napping in bright sunlight. There is a seed on its back. By soaking up the sun's rays, the seed grows progressively larger."
            evolution:
              next: [["2", "Level 16"]]
            profile:
              height: "0.7 m"
              weight: "6.9 kg"
              egg: ["Monster", "Grass"]
              ability: [["Overgrow", "false"], ["Chlorophyll", "true"]]
              gender: "87.5:12.5"
            image:
              sprite: "https://raw.githubusercontent.com/Purukitto/pokemon-data.json/master/images/pokedex/sprites/001.png"
              thumbnail: "https://raw.githubusercontent.com/Purukitto/pokemon-data.json/master/images/pokedex/thumbnails/001.png"
              hires: "https://raw.githubusercontent.com/Purukitto/pokemon-data.json/master/images/pokedex/hires/001.png"

    PokedexPokemon:
      type: object
      required:
        - id
        - name
        - type
        - base
        - species
        - description
        - profile
        - image
      properties:
        id:
          type: integer
          description: Pokémon National Dex number
          minimum: 1
          maximum: 1025
        name:
          $ref: '#/components/schemas/PokedexPokemonName'
        type:
          type: array
          items:
            type: string
          description: Pokémon types
          minItems: 1
          maxItems: 2
        base:
          $ref: '#/components/schemas/PokedexPokemonStats'
        species:
          type: string
          description: Pokémon species classification
        description:
          type: string
          description: Pokémon description
        evolution:
          $ref: '#/components/schemas/PokedexPokemonEvolution'
        profile:
          $ref: '#/components/schemas/PokedexPokemonProfile'
        image:
          $ref: '#/components/schemas/PokedexPokemonImage'
      example:
        id: 1
        name:
          english: "Bulbasaur"
          japanese: "フシギダネ"
          german: "Bisasam"
        type: ["Grass", "Poison"]
        base:
          HP: 45
          Attack: 49
          Defense: 49
          "Sp. Attack": 65
          "Sp. Defense": 65
          Speed: 45
        species: "Seed Pokémon"
        description: "Bulbasaur can be seen napping in bright sunlight. There is a seed on its back. By soaking up the sun's rays, the seed grows progressively larger."
        evolution:
          next: [["2", "Level 16"]]
        profile:
          height: "0.7 m"
          weight: "6.9 kg"
          egg: ["Monster", "Grass"]
          ability: [["Overgrow", "false"], ["Chlorophyll", "true"]]
          gender: "87.5:12.5"
        image:
          sprite: "https://raw.githubusercontent.com/Purukitto/pokemon-data.json/master/images/pokedex/sprites/001.png"
          thumbnail: "https://raw.githubusercontent.com/Purukitto/pokemon-data.json/master/images/pokedex/thumbnails/001.png"
          hires: "https://raw.githubusercontent.com/Purukitto/pokemon-data.json/master/images/pokedex/hires/001.png"

    PokedexPokemonName:
      type: object
      required:
        - english
        - japanese
        - german
      properties:
        english:
          type: string
          description: English name
        japanese:
          type: string
          description: Japanese name
        german:
          type: string
          description: German name

    PokedexPokemonStats:
      type: object
      required:
        - HP
        - Attack
        - Defense
        - "Sp. Attack"
        - "Sp. Defense"
        - Speed
      properties:
        HP:
          type: integer
          minimum: 1
        Attack:
          type: integer
          minimum: 1
        Defense:
          type: integer
          minimum: 1
        "Sp. Attack":
          type: integer
          minimum: 1
        "Sp. Defense":
          type: integer
          minimum: 1
        Speed:
          type: integer
          minimum: 1

    PokedexPokemonEvolution:
      type: object
      properties:
        prev:
          type: array
          items:
            type: string
          minItems: 2
          maxItems: 2
          description: Previous evolution [id, method]
        next:
          type: array
          items:
            type: array
            items:
              type: string
            minItems: 2
            maxItems: 2
          description: Next evolution options [[id, method], ...]

    PokedexPokemonProfile:
      type: object
      required:
        - height
        - weight
        - egg
        - ability
        - gender
      properties:
        height:
          type: string
          description: Pokémon height
        weight:
          type: string
          description: Pokémon weight
        egg:
          type: array
          items:
            type: string
          description: Egg groups
        ability:
          type: array
          items:
            type: array
            items:
              type: string
            minItems: 2
            maxItems: 2
          description: Abilities [name, isHidden]
        gender:
          type: string
          description: Gender ratio

    PokedexPokemonImage:
      type: object
      required:
        - sprite
      properties:
        sprite:
          type: string
          format: uri
          description: Sprite image URL
        thumbnail:
          type: string
          format: uri
          description: Thumbnail image URL
        hires:
          type: string
          format: uri
          description: High resolution image URL

    AddPokemonRequest:
      type: object
      required:
        - playerId
        - pokemonId
        - status
        - routeName
      properties:
        playerId:
          type: string
        pokemonId:
          type: string
        status:
          $ref: '#/components/schemas/PokemonStatus'
        routeName:
          type: string
      example:
        playerId: "player-1"
        pokemonId: "1"
        status: "CAUGHT"
        routeName: "Route 1"

    UpdatePokemonRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/PokemonStatus'
        routeName:
          type: string
      example:
        status: "FAINTED"
        routeName: "Route 1"

    PokemonStatus:
      type: string
      enum:
        - CAUGHT
        - FAINTED
        - IN_BATTLE
        - RUNNING
      description: The status of a Pokémon in a session
      example: "CAUGHT"

    Pokemon:
      type: object
      required:
        - id
        - playerId
        - sessionId
        - pokemonId
        - status
        - routeName
      properties:
        id:
          type: string
        playerId:
          type: string
        sessionId:
          type: string
        pokemonId:
          type: string
        status:
          $ref: '#/components/schemas/PokemonStatus'
        routeName:
          type: string
      example:
        id: "pokemon-1"
        playerId: "player-1"
        sessionId: "session-123"
        pokemonId: "1"
        status: "CAUGHT"
        routeName: "Route 1"

    PokemonListResponse:
      type: object
      required:
        - pokemon
      properties:
        pokemon:
          type: array
          items:
            $ref: '#/components/schemas/Pokemon'
      example:
        pokemon:
          - id: "pokemon-1"
            playerId: "player-1"
            sessionId: "session-123"
            pokemonId: "1"
            status: "CAUGHT"
            routeName: "Route 1"
          - id: "pokemon-2"
            playerId: "player-1"
            sessionId: "session-123"
            pokemonId: "4"
            status: "FAINTED"
            routeName: "Route 1"

    RouteListResponse:
      type: object
      required:
        - routes
      properties:
        routes:
          type: array
          items:
            type: string
      example:
        routes:
          - "Route 1"
          - "Route 2"

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

tags:
  - name: System
    description: System health and monitoring endpoints
  - name: Session
    description: Game management endpoints
  - name: Pokedex
    description: Static Pokédex reference data endpoints
  - name: Pokemon
    description: Pokémon management endpoints within a session