generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String
  email     String?  @unique // NULL for now, required later
  passwordHash String? // NULL for now, required later
  role      String   @default("user") // 'user' or 'admin'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playerSessions PlayerSession[]

  pokemons  Pokemon[]

  @@map("users")
}

model Session {
  id          String        @id @default(cuid())
  name        String
  description String
  status      SessionStatus @default(WAITING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  playerSessions PlayerSession[]

  pokemons    Pokemon[]

  @@map("sessions")
}

model PlayerSession {
  playerId  String
  sessionId String
  joinedAt  DateTime @default(now())

  user    User   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  session Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@id([playerId, sessionId])
  @@map("player_sessions")
}

model Pokemon {
  id        String          @id @default(cuid())
  userId    String
  sessionId String
  pokemonId Int
  routeName String
  status    PokemonStatus   @default(CAUGHT)
  location  PokemonLocation @default(BOX)
  position  Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([userId, sessionId, routeName]) // One Pokemon per route per user per session
  @@map("pokemons")
}

enum SessionStatus {
  WAITING
  STARTED
  FINISHED
}

enum PokemonStatus {
  CAUGHT
  NOT_CAUGHT
  DEAD
}

enum PokemonLocation {
  TEAM
  BOX
}
